#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var suf_node_1 = require("suf-node");
var messages_1 = require("./messages");
var fs_1 = require("fs");
var path_1 = require("path");
var codeBlock = '```';
var Start = /** @class */ (function () {
    function Start() {
        var _this = this;
        this.dir = 'dist';
        this.out = 'README.md';
        this.name = 'Docs';
        this.include = [];
        this.exclude = [];
        this.operators = {
            '!==': function (a, b) {
                return a !== b;
            },
            '===': function (a, b) {
                return a === b;
            }
        };
        var _a = process.argv, argumentArr = _a.slice(2);
        this.args = [];
        argumentArr.forEach(function (arg, i) {
            if (arg.toLowerCase() === '--dir') {
                argumentArr[i + 1] ? (_this.dir = argumentArr[i + 1]) : messages_1.failure("--dir " + argumentArr[i + 1] + " not Found.");
            }
            if (arg.toLowerCase() === '--out') {
                argumentArr[i + 1] ? (_this.out = argumentArr[i + 1]) : messages_1.failure("--out " + argumentArr[i + 1] + " not Found.");
            }
            if (arg.toLowerCase() === '--name') {
                argumentArr[i + 1] ? (_this.name = argumentArr[i + 1]) : messages_1.failure("--name " + argumentArr[i + 1] + " not Found.");
            }
            if (arg.toLowerCase() === '--exclude') {
                _this.getInOrExclude(i, 'exclude', argumentArr);
            }
            if (arg.toLowerCase() === '--include') {
                _this.getInOrExclude(i, 'include', argumentArr);
            }
            _this.args[i] = arg === undefined ? '' : arg.toLowerCase();
        });
        if (/^--?(h|help)$/i.test(this.args[0])) {
            messages_1.logger.Log('help');
        }
        else {
            this.run();
        }
    }
    Start.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var filesPaths, input, inputFile, declarationRegex, rawText, links, _i, filesPaths_1, path, fileText, fileName, m, res, all, comment, declaration, type, name_1, content, generated;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPaths()];
                    case 1:
                        filesPaths = _a.sent();
                        input = 'DOC_INSERTION_MARKER';
                        if (fs_1.existsSync(this.out)) {
                            inputFile = fs_1.readFileSync(this.out).toString();
                            input = inputFile.replace(/<span id="DOC_GENERATION_MARKER_0"><\/span>[\S\s]*<span id="DOC_GENERATION_MARKER_1"><\/span>/, 'DOC_INSERTION_MARKER');
                            if (!/DOC_INSERTION_MARKER/.test(input)) {
                                input += '\nDOC_INSERTION_MARKER';
                            }
                        }
                        declarationRegex = /(\/\*\*[\S\s]*? \*\/\n)?export (declare|interface) ([\w-]*) ([\w-]*)(.*?;|[\S\s]*?^})/gm;
                        rawText = '';
                        links = [];
                        for (_i = 0, filesPaths_1 = filesPaths; _i < filesPaths_1.length; _i++) {
                            path = filesPaths_1[_i];
                            fileText = fs_1.readFileSync(path).toString();
                            fileName = path.replace(/.*(\/|\\\\)([\w\.-]*)\.d\.ts/, '$2');
                            m = void 0;
                            if (!fileName.endsWith('.internal')) {
                                links.push("#" + fileName);
                                res = "\n### " + fileName + "\n";
                                while ((m = declarationRegex.exec(fileText)) !== null) {
                                    if (m.index === declarationRegex.lastIndex) {
                                        declarationRegex.lastIndex++;
                                    }
                                    all = m[0], comment = m[1], declaration = m[2], type = m[3], name_1 = m[4], content = m[5];
                                    if (!/^[\n \t]*internal[\n \t]*/i.test(getComment(comment))) {
                                        links.push(declaration === 'interface' ? type : name_1);
                                        res += "\n##### " + (declaration === 'interface' ? type : name_1) + "\n\n" + codeBlock + "typescript\n" + all.replace(/export ?| ?declare ?/g, '') + "\n" + codeBlock + "\n";
                                    }
                                }
                                rawText += res;
                            }
                        }
                        generated = "<span id=\"DOC_GENERATION_MARKER_0\"></span>\n\n# " + this.name + "\n" + this.createNav(links) + rawText + "\n_Generated with_ **[ts-doc-gen](https://www.npmjs.com/package/ts-doc-gen)**\n<span id=\"DOC_GENERATION_MARKER_1\"></span>";
                        fs_1.writeFile(this.out, input.replace(/DOC_INSERTION_MARKER/, generated), function (err) {
                            if (err)
                                throw err;
                            messages_1.success("Successfully Generated Docs at " + _this.out);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Start.prototype.createNav = function (links) {
        var linkRes = '';
        for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
            var link = links_1[_i];
            if (link.startsWith('#')) {
                linkRes += "\n- **[" + link.replace(/#/, '') + "](" + link.toLowerCase() + ")**\n\n";
            }
            else {
                linkRes += "  - [" + link + "](#" + link.toLowerCase() + ")\n";
            }
        }
        return linkRes;
    };
    Start.prototype.getInOrExclude = function (i, type, args) {
        if (type === 'exclude' ? this.include.length === 0 : this.exclude.length === 0) {
            args[i + 1]
                ? (this[type] = args[i + 1]
                    .replace(/['"](.*?)['"]/, '$1')
                    .split(',')
                    .map(function (v) { return (v.endsWith('.d.ts') ? v : v.concat('.d.ts')); }))
                : messages_1.failure("--" + type + " " + args[i + 1] + " not Found.");
        }
        else {
            messages_1.failure("--" + type + " cannot be used with " + (type === 'exclude' ? '--include' : '--exclude') + ", --" + type + " will be ignored.");
        }
    };
    Start.prototype.getPaths = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dir, isInclude, type, filesPaths;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, suf_node_1.Walk("./" + this.dir)];
                    case 1:
                        dir = _a.sent();
                        isInclude = this.include.length === 0;
                        type = isInclude ? 'exclude' : 'include';
                        filesPaths = dir.filter(function (fileName) {
                            return fileName.endsWith('d.ts') &&
                                _this.operators[isInclude ? '===' : '!=='](_this[type].indexOf(path_1.basename(fileName)), -1);
                        });
                        return [2 /*return*/, filesPaths];
                }
            });
        });
    };
    return Start;
}());
new Start();
function getComment(comment) {
    return comment ? comment.replace(/\/?\*\*?\/?/g, '') : '';
}
